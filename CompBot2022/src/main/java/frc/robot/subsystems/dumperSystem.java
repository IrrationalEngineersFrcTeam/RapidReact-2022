// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.RobotContainer;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.Talon;

import com.ctre.phoenix.motorcontrol.ControlMode; 
import com.ctre.phoenix.motorcontrol.InvertType; 
import com.ctre.phoenix.motorcontrol.TalonFXInvertType; 
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
import com.ctre.phoenix.motorcontrol.*;
import com.ctre.phoenix.motorcontrol.ControlMode;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class dumperSystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX m_dumperMotor;
    final int kUnitsPerRevolution = 2048;
    final TalonFXInvertType kInvertType = TalonFXInvertType.Clockwise;
    final NeutralMode kBrakeDurNeutral = NeutralMode.Brake;
    // Used to track when dumper is raising.
    private boolean dumperRaising;
    // Used to track when dumper is lowering.
    private boolean dumperLowering;
    private boolean dumperFullyLowered;
    private boolean dumperFullyRaised;
    private double dumperMotorPosition;
    private double rightStickY;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public dumperSystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_dumperMotor = new WPI_TalonFX(Constants.DumperConstants.kDumperMotorPort);
        addChild("m_dumperMotor",m_dumperMotor);

        TalonFXConfiguration configs = new TalonFXConfiguration();
        configs.primaryPID.selectedFeedbackSensor = FeedbackDevice.IntegratedSensor;
        m_dumperMotor.configAllSettings(configs);
        m_dumperMotor.configFactoryDefault();
        rightStickY = 0;

        m_dumperMotor.set(ControlMode.PercentOutput, 0.0);
        m_dumperMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 20);
        m_dumperMotor.setInverted(kInvertType);
        m_dumperMotor.setNeutralMode(kBrakeDurNeutral);
        resetSensor();
        
        dumperRaising = false;
        dumperLowering = false;
        // To do: may need to set this based on switch
        dumperFullyLowered = true;
        dumperFullyRaised = false;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void resetSensor() {
        m_dumperMotor.setSelectedSensorPosition(0.0);
    }

    public void moveDumper() {
        rightStickY = RobotContainer.getInstance().getJoystick1().getY();
        if (rightStickY > 0.0) {
            rightStickY = rightStickY*Constants.DumperConstants.kDumperRaiseMotorSpeed;
        } else {
            rightStickY = rightStickY*Constants.DumperConstants.kDumperLowerMotorSpeed;
        }
        m_dumperMotor.set(ControlMode.PercentOutput, rightStickY);
    }

    public void raiseDumper() {
        if (dumperRaising == false) {
           m_dumperMotor.set(ControlMode.PercentOutput, Constants.DumperConstants.kDumperRaiseMotorSpeed);
            dumperRaising = true;
            dumperFullyLowered = false;
        }
    }

    public void lowerDumper() {
        if (dumperLowering == false) {
            m_dumperMotor.set(ControlMode.PercentOutput, -1.0*Constants.DumperConstants.kDumperLowerMotorSpeed);
            dumperLowering = true;
            dumperFullyRaised = false;
        }
    }

    public boolean isDumperRaised() {
        if (dumperFullyRaised == false) {
            dumperMotorPosition = m_dumperMotor.getSelectedSensorPosition();
            System.out.println("Dumper sensor value (raising): " + dumperMotorPosition);
            if (dumperMotorPosition >= Constants.DumperConstants.kDumperRaisedPositionLimit) {
             m_dumperMotor.set(ControlMode.PercentOutput, 0.0);
             dumperFullyRaised = true;
             dumperRaising = false;
            } 
        }
         return dumperFullyRaised;
    }

    public boolean isDumperLowered() {
        if (dumperFullyLowered == false) {
            dumperMotorPosition = m_dumperMotor.getSelectedSensorPosition();
            System.out.println("Dumper motor (lowering): " + dumperMotorPosition);
            if (dumperMotorPosition <= Constants.DumperConstants.kDumperLoweredPositionLimit) {
             m_dumperMotor.set(ControlMode.PercentOutput, 0.0);
             dumperFullyLowered = true;
             dumperLowering = false;
            } 
        }
         return dumperFullyLowered;
    }

    public void stopRaising() {
        m_dumperMotor.set(ControlMode.PercentOutput, 0);
        dumperRaising = false;
    }

    public void stopLowering() {
        m_dumperMotor.set(ControlMode.PercentOutput, 0);
        dumperLowering = false;
    }

    public double getSensor() {
        return m_dumperMotor.getSelectedSensorPosition();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

// Add imports for WPI_TalonFX FX motors
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveSystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX m_frontL;
private WPI_TalonFX m_backL;
private MotorControllerGroup mc_leftSide;
private WPI_TalonFX m_frontR;
private WPI_TalonFX m_backR;
private MotorControllerGroup mc_rightSide;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public driveSystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_frontL = new WPI_TalonFX(Constants.DriveConstants.kLeftFrontMotorPort, "rio");
        m_frontL.configFactoryDefault();
        addChild("m_frontL",m_frontL);
        m_frontL.setInverted(false);

        m_backL = new WPI_TalonFX(Constants.DriveConstants.kLeftBackMotorPort, "rio");
        m_backL.configFactoryDefault();
        addChild("m_backL",m_backL);
        m_backL.setInverted(false);

        mc_leftSide = new MotorControllerGroup(m_frontL, m_backL  );
        addChild("mc_leftSide",mc_leftSide);
        

        m_frontR = new WPI_TalonFX(Constants.DriveConstants.kRightFrontMotorPort, "rio");
        m_frontR.configFactoryDefault();
        addChild("m_frontR",m_frontR);
        m_frontR.setInverted(true);

        m_backR = new WPI_TalonFX(Constants.DriveConstants.kRightBackMotorPort, "rio");
        m_backR.configFactoryDefault();
        addChild("m_backR",m_backR);
        m_backR.setInverted(true);

        mc_rightSide = new MotorControllerGroup(m_frontR, m_backR  );
        addChild("mc_rightSide",mc_rightSide);
        

        differentialDrive1 = new DifferentialDrive(mc_leftSide, mc_rightSide);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Force motors to be zero percent output at start.
        m_frontL.set(ControlMode.PercentOutput, 0);
        m_backL.set(ControlMode.PercentOutput, 0);
        m_frontR.set(ControlMode.PercentOutput, 0);
        m_backR.set(ControlMode.PercentOutput, 0);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void TankDrive (double speedL, double speedR) {
        differentialDrive1.tankDrive(speedL, speedR);
    }

}

